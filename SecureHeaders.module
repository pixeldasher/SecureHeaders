<?php

declare(strict_types=1);

namespace Hochwarth;

use ProcessWire\HookEvent;
use ProcessWire\Module;
use ProcessWire\WireData;

/**
 * SecureHeaders Module for ProcessWire
 *
 * Manages HTTP security headers on the frontend based on OWASP recommendations.
 * @see https://owasp.org/www-project-secure-headers/
 */
class SecureHeaders extends WireData implements Module
{
    /**
     * Property to hold the per-request CSP nonce
     */
    private string $cspNonce = '';

    /**
     * Get module information
     */
    public static function getModuleInfo(): array
    {
        return [
            'title' => 'Secure Headers',
            'version' => '1.0.0',
            'summary' => 'Verwaltet HTTP-Sicherheits-Header für das Frontend basierend auf gängigen Standards.',
            'href' => 'https://github.com/pixeldasher/SecureHeaders',
            'author' => 'Phillip "pixeldasher" Issner',
            'singular' => true,
            'permission' => 'site-security',
            'icon' => 'shield',
            'autoload' => 'template!=admin',
            'requires' => [
                'PHP>=8.3',
                'ProcessWire>=3.0.249'
            ],
        ];
    }

    /**
     * Install the module
     */
    public function ___install(): void
    {
        $this->permissions->add('site-security', 'Secure Headers Modul konfigurieren');
    }

    /**
     * Uninstall the module
     */
    public function ___uninstall(): void
    {
        $this->permissions->remove('site-security');
    }

    /**
     * Initialize the module and add the hook
     */
    public function ready(): void
    {
        $this->addHookAfter('Page::render', $this, 'injectHeaders');
    }

    /**
     * Public API method to retrieve the generated CSP nonce for the current request.
     */
    public function getNonce(): string
    {
        return $this->cspNonce;
    }

    /**
     * Hook method to inject the configured HTTP security headers into the response.
     */
    public function injectHeaders(HookEvent $event): void
    {
        if ($this->config->admin || $this->config->ajax) {
            return;
        }

        if (\headers_sent())
            return;

        $conf = $this->modules->getConfig($this);
        if (empty($conf))
            return;

        // --- 1. Build and Set Content-Security-Policy ---
        if (!empty($conf['csp_enabled'])) {
            $cspHeaderName = !empty($conf['csp_report_only']) ? 'Content-Security-Policy-Report-Only' : 'Content-Security-Policy';
            $policyString = str_replace(["\n", "\r"], ' ', trim($conf['csp_policy'] ?? ''));
            $cspParts = [];

            if (strpos($policyString, 'nonce-proxy') !== false) {
                $this->cspNonce = bin2hex(random_bytes(16));
                $this->config->set('cspNonce', $this->cspNonce);

                $event->return = preg_replace('#nonce=(["\'])proxy["\']#', "nonce=\"{$this->cspNonce}\"", $event->return);
                $policyString = str_replace('nonce-proxy', "nonce-{$this->cspNonce}", $policyString);
            }

            if ($policyString) {
                $cspParts[] = $policyString;
            }

            if (stripos($policyString, 'frame-ancestors') === false) {
                $framingPolicy = $conf['framing_policy'] ?? 'none';
                $frameAncestorsValue = '';
                switch ($framingPolicy) {
                    case 'self':
                        $frameAncestorsValue = "'self'";
                        break;
                    case 'custom':
                        $frameAncestorsValue = $this->sanitizer->text($conf['framing_custom_origins']);
                        break;
                    case 'none':
                    default:
                        $frameAncestorsValue = "'none'";
                        break;
                }
                if ($frameAncestorsValue) {
                    $cspParts[] = 'frame-ancestors ' . $frameAncestorsValue;
                }
            }

            if (!empty($conf['csp_report_to']) && stripos($policyString, 'report-uri') === false) {
                $cspParts[] = 'report-uri ' . $this->sanitizer->url($conf['csp_report_to']);
            }

            if (!empty($cspParts)) {
                \header($cspHeaderName . ': ' . implode('; ', array_filter($cspParts)));
            }
        }

        // --- 2. Add legacy X-Frame-Options for wider compatibility ---
        $framingPolicy = $conf['framing_policy'] ?? 'none';
        $xFrameOptionsValue = 'DENY';

        if ($framingPolicy === 'self') {
            $xFrameOptionsValue = 'SAMEORIGIN';
        }

        \header('X-Frame-Options: ' . $xFrameOptionsValue, true);

        // --- 3. Set HSTS header ---
        if (!empty($conf['hsts_enabled']) && $this->config->https) {
            $value = 'max-age=' . (int) ($conf['hsts_max_age'] ?? 31536000);

            if (!empty($conf['hsts_include_subdomains']))
                $value .= '; includeSubDomains';
            if (!empty($conf['hsts_preload']))
                $value .= '; preload';

            \header('Strict-Transport-Security: ' . $value, true);
        }

        // --- 4. Set Cross-Origin Policies ---
        if (!empty($conf['coop_policy'])) {
            \header('Cross-Origin-Opener-Policy: ' . $conf['coop_policy'], true);
        }
        if (!empty($conf['coep_policy'])) {
            \header('Cross-Origin-Embedder-Policy: ' . $conf['coep_policy'], true);
        }
        if (!empty($conf['corp_policy'])) {
            \header('Cross-Origin-Resource-Policy: ' . $conf['corp_policy'], true);
        }

        // --- 5. Set X-Content-Type-Options header ---
        if (!empty($conf['x_content_type_options_enabled'])) {
            \header('X-Content-Type-Options: nosniff', true);
        }

        // --- 6. Set Referrer-Policy header ---
        if (!empty($conf['referrer_policy'])) {
            \header('Referrer-Policy: ' . $conf['referrer_policy'], true);
        }

        // --- 7. Set Permissions-Policy header ---
        if (!empty($conf['permissions_policy_enabled']) && !empty($conf['permissions_policy'])) {
            \header('Permissions-Policy: ' . $conf['permissions_policy'], true);
        }
    }
}

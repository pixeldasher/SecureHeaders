<?php

declare(strict_types=1);

namespace Hochwarth;

use ProcessWire\ConfigurableModule;
use ProcessWire\HookEvent;
use ProcessWire\Inputfield;
use ProcessWire\InputfieldCheckbox;
use ProcessWire\InputfieldFieldset;
use ProcessWire\InputfieldRadios;
use ProcessWire\InputfieldSelect;
use ProcessWire\InputfieldText;
use ProcessWire\InputfieldTextarea;
use ProcessWire\InputfieldWrapper;
use ProcessWire\Module;
use ProcessWire\WireData;

use function ProcessWire\__;

/**
 * SecureHeaders Module for ProcessWire
 *
 * Manages HTTP security headers on the frontend based on OWASP recommendations.
 * @see https://owasp.org/www-project-secure-headers/
 */
class SecureHeaders extends WireData implements Module, ConfigurableModule
{
    /**
     * Property to hold the per-request CSP nonce
     */
    private string $cspNonce = '';

    /**
     * Get module information
     */
    public static function getModuleInfo(): array
    {
        return [
            'title' => 'Secure Headers',
            'version' => '1.0.0',
            'summary' => 'Verwaltet HTTP-Sicherheits-Header für das Frontend basierend auf gängigen Standards.',
            'href' => 'https://github.com/pixeldasher/SecureHeaders',
            'author' => 'Phillip "pixeldasher" Issner',
            'singular' => true,
            'permission' => 'site-security',
            'icon' => 'shield',
            'autoload' => 'template!=admin',
            'requires' => [
                'PHP>=8.3',
                'ProcessWire>=3.0.249'
            ],
        ];
    }

    /**
     * Install the module
     */
    public function ___install(): void
    {
        $this->permissions->add('site-security', 'Secure Headers Modul konfigurieren');
    }

    /**
     * Uninstall the module
     */
    public function ___uninstall(): void
    {
        $this->permissions->remove('site-security');
    }

    /**
     * Initialize the module and add the hook
     */
    public function ready(): void
    {
        $this->addHookAfter('Page::render', $this, 'injectHeaders');
    }

    /**
     * Public API method to retrieve the generated CSP nonce for the current request.
     */
    public function getNonce(): string
    {
        return $this->cspNonce;
    }

    /**
     * Builds the module's configuration form.
     */
    public static function getModuleConfigInputfields(array $data): InputfieldWrapper
    {
        $wrapper = new InputfieldWrapper();

        // --- HSTS Fieldset ---
        $fieldSet = new InputfieldFieldset();
        $fieldSet->label = 'HTTP Strict Transport Security (HSTS)';
        $fieldSet->icon = 'lock';
        $fieldSet->description = __("Erzwingt sichere (HTTPS) Verbindungen zum Server. Der `Strict-Transport-Security`-Header teilt dem Browser mit, dass er ausschließlich über HTTPS mit der Seite kommunizieren soll.\n**Warnung:** Nur aktivieren, wenn die Website und ALLE Subdomains vollständig über HTTPS erreichbar sind. Eine Fehlkonfiguration kann die Website unzugänglich machen.\n[MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Strict-Transport-Security)");
        $fieldSet->collapsed = Inputfield::collapsedYes;

        $field = new InputfieldCheckbox();
        $field->name = 'hsts_enabled';
        $field->label = __('HSTS aktivieren');
        $field->label2 = __('Den Strict-Transport-Security-Header senden');
        if (!empty($data['hsts_enabled']))
            $field->attr('checked', 'checked');
        $fieldSet->add($field);

        $field = new InputfieldText();
        $field->name = 'hsts_max_age';
        $field->label = __('max-age (in Sekunden)');
        $field->description = __('Die Zeit in Sekunden, die der Browser sich die Anweisung merken soll.');
        $field->value = $data['hsts_max_age'] ?? '31536000';
        $field->notes = __('Empfohlen: 31536000 (1 Jahr).');
        $field->columnWidth = 50;
        $field->showIf = 'hsts_enabled=1';
        $fieldSet->add($field);

        $field = new InputfieldCheckbox();
        $field->name = 'hsts_include_subdomains';
        $field->label = 'includeSubDomains';
        $field->description = __('Wenn gesetzt, gilt diese Regel auch für alle Subdomains.');
        if (!empty($data['hsts_include_subdomains']))
            $field->attr('checked', 'checked');
        $field->columnWidth = 25;
        $field->showIf = 'hsts_enabled=1';
        $fieldSet->add($field);

        $field = new InputfieldCheckbox();
        $field->name = 'hsts_preload';
        $field->label = 'preload';
        $field->description = __('Erlaubt die Aufnahme in die "Preload"-Listen der Browser.');
        $field->notes = __('Siehe [hstspreload.org](https://hstspreload.org/) vor der Aktivierung.');
        if (!empty($data['hsts_preload']))
            $field->attr('checked', 'checked');
        $field->columnWidth = 25;
        $field->showIf = 'hsts_enabled=1';
        $fieldSet->add($field);

        $wrapper->add($fieldSet);

        // --- Content-Security-Policy Fieldset ---
        $fieldSet = new InputfieldFieldset();
        $fieldSet->label = 'Content Security Policy (CSP)';
        $fieldSet->icon = 'user-shield';
        $fieldSet->description = __("Der mächtigste Header zur Abwehr von Cross-Site-Scripting (XSS) und Dateneinschleusungs-Angriffen. Er legt fest, welche Ressourcen (Skripte, Bilder, etc.) von welchen Quellen geladen werden dürfen.\n**Warnung:** Eine fehlerhafte Konfiguration kann die Website unzugänglich machen. Neue Richtlinien sollten ggf. im 'Report-Only'-Modus getestet werden.\n[MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Content-Security-Policy)");
        $fieldSet->collapsed = Inputfield::collapsedNo;

        $field = new InputfieldCheckbox();
        $field->name = 'csp_enabled';
        $field->label = __('CSP aktivieren');
        if (!empty($data['csp_enabled']))
            $field->attr('checked', 'checked');
        $fieldSet->add($field);

        $field = new InputfieldCheckbox();
        $field->name = 'csp_report_only';
        $field->label = __('Report-Only Modus');
        $field->label2 = __('Verstöße nur protokollieren, nicht blockieren');
        $field->notes = __('Empfohlen zum Testen neuer Richtlinien.');
        if (!empty($data['csp_report_only']))
            $field->attr('checked', 'checked');
        $field->columnWidth = 100;
        $field->showIf = 'csp_enabled=1';
        $fieldSet->add($field);

        $field = new InputfieldTextarea();
        $field->name = 'csp_policy';
        $field->label = __('CSP-Richtlinien');
        $field->description = __('Hier das vollständige CSP-Regelwerk eingeben. Verwenden Sie den Platzhalter `nonce-proxy`, wo die pro Request generierte Nonce eingefügt werden soll.');
        $field->notes = __("Beispiel für eine strikte CSP: `default-src 'self' nonce-proxy; img-src 'self' data:; connect-src 'self'; form-action 'self'; upgrade-insecure-requests; block-all-mixed-content;`");
        $field->value = $data['csp_policy'] ?? "default-src 'self' nonce-proxy; img-src 'self' data:; connect-src 'self'; form-action 'self'; upgrade-insecure-requests; block-all-mixed-content;";
        $field->rows = 8;
        $field->showIf = 'csp_enabled=1';
        $fieldSet->add($field);

        $field = new InputfieldText();
        $field->name = 'csp_report_to';
        $field->label = __('Report to-URI');
        $field->description = __('Geben Sie eine URL an, an die Berichte über Verstöße gesendet werden sollen (setzt die `report-to`-Richtlinie). [MDN zu report-to](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Content-Security-Policy/report-to)');
        $field->value = $data['csp_report_to'] ?? '';
        $field->showIf = 'csp_enabled=1';
        $fieldSet->add($field);

        $wrapper->add($fieldSet);

        // --- Framing Policy Fieldset ---
        $fieldSet = new InputfieldFieldset();
        $fieldSet->label = 'Framing Policy (Clickjacking-Schutz)';
        $fieldSet->icon = 'clone';
        $fieldSet->description = __("Steuert, ob die Website auf einer anderen, fremden Webseite in einem `<iframe>` oder `<object>` eingebettet werden darf. Setzt die `frame-ancestors`-Richtlinie im CSP-Regelwerk (falls nicht bereits vorhanden) und den veralteten `X-Frame-Options`-Header für maximale Kompatibilität.\n[MDN zu frame-ancestors](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) | [MDN zu X-Frame-Options](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/X-Frame-Options)");
        $fieldSet->collapsed = Inputfield::collapsedYes;

        $field = new InputfieldRadios();
        $field->name = 'framing_policy';
        $field->label = __('Framing-Regel');
        $field->addOption('none', __("Jegliches Framing verbieten (`'none'`)"));
        $field->addOption('self', __("Nur von derselben Herkunft erlauben (`'self'`) – Empfohlen"));
        $field->addOption('custom', __('Von bestimmten Herkünften erlauben'));
        $field->value = $data['framing_policy'] ?? 'self';
        $fieldSet->add($field);

        $field = new InputfieldTextarea();
        $field->name = 'framing_custom_origins';
        $field->label = __('Benutzerdefinierte, erlaubte Herkünfte');
        $field->description = __("Geben Sie eine durch Leerzeichen getrennte Liste von erlaubten Herkünften ein (z.B. `https://partner.com https://andere.site`).\n*Hinweis: Diese Herkünfte gelten nur für die CSP-Richtlinien `frame-ancestors`. Der veraltete `X-Frame-Options`-Header wird bei dieser Auswahl aus Sicherheitsgründen auf `DENY` gesetzt.*");
        $field->value = $data['framing_custom_origins'] ?? '';
        $field->showIf = 'framing_policy=custom';
        $fieldSet->add($field);

        $wrapper->add($fieldSet);

        // --- Cross-Origin Policies Fieldset ---
        $fieldSet = new InputfieldFieldset();
        $fieldSet->label = 'Cross-Origin Policies (COOP, COEP, CORP)';
        $fieldSet->icon = 'globe';
        $fieldSet->description = __('Diese Header bieten Schutz gegen spekulative Ausführungsangriffe wie Spectre, indem sie die Cross-Origin-Isolation aktivieren. Dies ist ein fortgeschrittenes Sicherheitsfeature. [Artikel auf web.dev](https://web.dev/why-coop-coep/)');
        $fieldSet->collapsed = Inputfield::collapsedYes;

        $field = new InputfieldSelect();
        $field->name = 'coop_policy';
        $field->label = 'Cross-Origin-Opener-Policy (COOP)';
        $field->description = __('Schützt vor Cross-Origin-Angriffen, indem es Dokumente in einem eigenen Kontext isoliert. [MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy)');
        $field->addOption('', __('Nicht gesetzt'));
        $field->addOption('unsafe-none', 'unsafe-none');
        $field->addOption('same-origin-allow-popups', 'same-origin-allow-popups (' . __('Empfohlen') . ')');
        $field->addOption('same-origin', 'same-origin');
        $field->value = $data['coop_policy'] ?? 'same-origin-allow-popups';
        $fieldSet->add($field);

        $field = new InputfieldSelect();
        $field->name = 'coep_policy';
        $field->label = 'Cross-Origin-Embedder-Policy (COEP)';
        $field->description = __('Verhindert, dass ein Dokument Cross-Origin-Ressourcen lädt, die nicht explizit die Erlaubnis dazu erteilen. [MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy)');
        $field->addOption('', __('Nicht gesetzt'));
        $field->addOption('unsafe-none', 'unsafe-none');
        $field->addOption('require-corp', 'require-corp');
        $field->value = $data['coep_policy'] ?? '';
        $field->notes = __('Warnung: `require-corp` kann das Laden von Bildern, Skripten und Stilen verhindern, wenn diese nicht die korrekten Cross-Origin-Header (CORP oder CORS) senden.');
        $fieldSet->add($field);

        $field = new InputfieldSelect();
        $field->name = 'corp_policy';
        $field->label = 'Cross-Origin-Resource-Policy (CORP)';
        $field->description = __('Kontrolliert, welche Cross-Origin-Seiten eigene Ressourcen einbetten dürfen. Dies ist ein Header, den *diese Seite* sendet, um sich vor Einbettung durch andere zu schützen. [MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy)');
        $field->addOption('', __('Nicht gesetzt'));
        $field->addOption('same-site', 'same-site');
        $field->addOption('same-origin', 'same-origin (' . __('Empfohlen') . ')');
        $field->addOption('cross-origin', 'cross-origin');
        $field->value = $data['corp_policy'] ?? 'same-origin';
        $fieldSet->add($field);

        $wrapper->add($fieldSet);

        // --- Other Headers Fieldset ---
        $fieldSet = new InputfieldFieldset();
        $fieldSet->label = __('Weitere Sicherheits-Header');
        $fieldSet->icon = 'cogs';
        $fieldSet->collapsed = Inputfield::collapsedYes;

        $field = new InputfieldCheckbox();
        $field->name = 'x_content_type_options_enabled';
        $field->label = 'X-Content-Type-Options';
        $field->label2 = __('`nosniff` aktivieren, um MIME-Sniffing-Angriffe zu verhindern.');
        $field->description = __("Verhindert, dass der Browser versucht, den Inhaltstyp einer Ressource zu 'erraten', was eine Sicherheitslücke sein kann. [MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/X-Content-Type-Options)");
        $field->notes = __('Dringend empfohlen. Standardmäßig aktiviert.');
        $field->attr('value', 1);
        if (($data['x_content_type_options_enabled'] ?? 1) === 1) {
            $field->attr('checked', 'checked');
        }
        $fieldSet->add($field);

        $field = new InputfieldSelect();
        $field->name = 'referrer_policy';
        $field->label = 'Referrer-Policy';
        $field->description = __('Steuert, wie viele Referrer-Informationen (die Herkunftsseite) mit Anfragen gesendet werden. [MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Referrer-Policy)');
        $field->addOption('no-referrer', 'no-referrer');
        $field->addOption('no-referrer-when-downgrade', 'no-referrer-when-downgrade');
        $field->addOption('origin', 'origin');
        $field->addOption('origin-when-cross-origin', 'origin-when-cross-origin');
        $field->addOption('same-origin', 'same-origin');
        $field->addOption('strict-origin', 'strict-origin');
        $field->addOption('strict-origin-when-cross-origin', 'strict-origin-when-cross-origin (' . __('Empfohlen') . ')');
        $field->addOption('unsafe-url', 'unsafe-url');
        $field->value = $data['referrer_policy'] ?? 'strict-origin-when-cross-origin';
        $fieldSet->add($field);

        $wrapper->add($fieldSet);

        // --- Permissions-Policy Fieldset ---
        $fieldSet = new InputfieldFieldset();
        $fieldSet->label = 'Permissions Policy';
        $fieldSet->icon = 'camera-retro';
        $fieldSet->description = __('Kontrolliert den Zugriff auf Browser-Funktionen und APIs (Kamera, Mikrofon, Geolokalisierung etc.). Ersetzt den älteren `Feature-Policy`-Header. [MDN-Dokumentation](https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Permissions-Policy)');
        $fieldSet->collapsed = Inputfield::collapsedYes;

        $field = new InputfieldCheckbox();
        $field->name = 'permissions_policy_enabled';
        $field->label = __('Permissions-Policy aktivieren');
        if (!empty($data['permissions_policy_enabled']))
            $field->attr('checked', 'checked');
        $fieldSet->add($field);

        $field = new InputfieldTextarea();
        $field->name = 'permissions_policy';
        $field->label = __('Permissions-Policy Richtlinienn');
        $field->description = __('Das vollständige Permissions-Policy-Regelwerk eingeben. Verwenden Sie `()` um ein Feature zu deaktivieren, `(self)` um es für dieselbe Herkunft zu erlauben, oder `(self "https://example.com")` für spezifische Herkünfte.');
        $field->notes = __('Beispiel, um den Zugriff auf gängige Features zu beschränken: `geolocation=(), camera=(), microphone=(), usb=()`');
        $field->value = $data['permissions_policy'] ?? 'geolocation=(), camera=(), microphone=(), usb=()';
        $field->rows = 5;
        $field->showIf = 'permissions_policy_enabled=1';
        $fieldSet->add($field);

        $wrapper->add($fieldSet);

        return $wrapper;
    }

    /**
     * Hook method to inject the configured HTTP security headers into the response.
     */
    public function injectHeaders(HookEvent $event): void
    {
        if ($this->config->admin || $this->config->ajax) {
            return;
        }

        if (\headers_sent())
            return;

        $conf = $this->modules->getConfig($this);
        if (empty($conf))
            return;

        // --- 1. Build and Set Content-Security-Policy ---
        if (!empty($conf['csp_enabled'])) {
            $cspHeaderName = !empty($conf['csp_report_only']) ? 'Content-Security-Policy-Report-Only' : 'Content-Security-Policy';
            $policyString = trim($conf['csp_policy'] ?? '');
            $cspParts = [];

            if (strpos($policyString, 'nonce-proxy') !== false) {
                $this->cspNonce = bin2hex(random_bytes(16));
                $this->config->set('cspNonce', $this->cspNonce);

                $policyString = str_replace('nonce-proxy', "'nonce-{$this->cspNonce}'", $policyString);
            }

            if ($policyString)
                $cspParts[] = $policyString;

            if (stripos($policyString, 'frame-ancestors') === false) {
                $framingPolicy = $conf['framing_policy'] ?? 'none';
                $frameAncestorsValue = '';
                switch ($framingPolicy) {
                    case 'self':
                        $frameAncestorsValue = "'self'";
                        break;
                    case 'custom':
                        $frameAncestorsValue = $this->sanitizer->text($conf['framing_custom_origins']);
                        break;
                    case 'none':
                    default:
                        $frameAncestorsValue = "'none'";
                        break;
                }
                if ($frameAncestorsValue) {
                    $cspParts[] = 'frame-ancestors ' . $frameAncestorsValue;
                }
            }

            if (!empty($conf['csp_report_to']) && stripos($policyString, 'report-uri') === false) {
                $cspParts[] = 'report-uri ' . $this->sanitizer->url($conf['csp_report_to']);
            }

            if (!empty($cspParts)) {
                \header($cspHeaderName . ': ' . implode('; ', array_filter($cspParts)));
            }
        }

        // --- 2. Add legacy X-Frame-Options for wider compatibility ---
        $framingPolicy = $conf['framing_policy'] ?? 'none';
        $xFrameOptionsValue = 'DENY';

        if ($framingPolicy === 'self') {
            $xFrameOptionsValue = 'SAMEORIGIN';
        }

        \header('X-Frame-Options: ' . $xFrameOptionsValue, true);

        // --- 3. Set HSTS header ---
        if (!empty($conf['hsts_enabled']) && $this->config->https) {
            $value = 'max-age=' . (int) ($conf['hsts_max_age'] ?? 31536000);

            if (!empty($conf['hsts_include_subdomains']))
                $value .= '; includeSubDomains';
            if (!empty($conf['hsts_preload']))
                $value .= '; preload';

            \header('Strict-Transport-Security: ' . $value, true);
        }

        // --- 4. Set Cross-Origin Policies ---
        if (!empty($conf['coop_policy'])) {
            \header('Cross-Origin-Opener-Policy: ' . $conf['coop_policy'], true);
        }
        if (!empty($conf['coep_policy'])) {
            \header('Cross-Origin-Embedder-Policy: ' . $conf['coep_policy'], true);
        }
        if (!empty($conf['corp_policy'])) {
            \header('Cross-Origin-Resource-Policy: ' . $conf['corp_policy'], true);
        }

        // --- 5. Set X-Content-Type-Options header ---
        if (!empty($conf['x_content_type_options_enabled'])) {
            \header('X-Content-Type-Options: nosniff', true);
        }

        // --- 6. Set Referrer-Policy header ---
        if (!empty($conf['referrer_policy'])) {
            \header('Referrer-Policy: ' . $conf['referrer_policy'], true);
        }

        // --- 7. Set Permissions-Policy header ---
        if (!empty($conf['permissions_policy_enabled']) && !empty($conf['permissions_policy'])) {
            \header('Permissions-Policy: ' . $conf['permissions_policy'], true);
        }
    }
}
